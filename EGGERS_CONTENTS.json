{"home":{"content":"# Functions, Conditionals, Objects\n---\n\nWelcome to lecture 9! Here's a brief class breakdown.\n\n#### [Streaming Class Notes](http://samantha.fewd.us/#broadcast/mottaquikarim/NYCDA_JS_Day_3)\nYour class notes for the day.\n\n\n#### Learning Objectives\n---\n\n1. Understand how conditionals and booleans can be used for programmatic decision making\n2. Understand how functions can be used to run similar tasks repeatedly.\n3. What are objects? How are they useful in programming?\n\n#### To Do Today\n---\n\n#### [Warmup](#warmup)\n#### [Functions](#functions)\n#### [Conditionals](#conditionals)\n#### [Objects](#objects)\n\n","idx":0},"title":{"content":"Functions, Conditionals, Objects","idx":1},"desc":{"content":"Introduction to JavaScript","idx":2},"warmup":{"content":"# Warmup\n---\n\n#### [Streaming Class Notes](http://samantha.fewd.us/#broadcast/mottaquikarim/NYCDA_JS_Day_3)\n\n<p></p>\n\nLet's begin with a few warmup exercises.\n\n#### Exercise 1\n---\n\nRemember to reference **[Terminal Tutor](https://github.com/mottaquikarim/TerminalTutor)** as needed.\n\n**ALL IN TERMINAL**:\n\n1. **Create** a new folder in your desktop.\n2. **Create** an index.html file with some text\n3. **Create** a styles folder\n4. **Add** empty main.css\n5. **Initialize** git in this directory\n6. **Create repo** in GitHub\n7. **Push** repo to Github\n\n#### Exercise 2\n---\n\n#### [Javascript Functions Practice 2](http://samantha.fewd.us/#fork/mottaquikarim/FEWD629_JavaScript_Basics_PSET) | [LIVE](http://samantha.fewd.us/#broadcast/mottaquikarim/FEWD629_JavaScript_Basics_PSET)\n**PURPOSE**: Review basic function operations\n\n#### Review\n---\n#### [LAST Class Notes](http://samantha.fewd.us/#broadcast/mottaquikarim/NYCDA_JS_Day_2)\n<p></p>\n\nTo help jog your memory, here's a quick review of some of the javascript we covered last class:\n\n#### Functions Review\n\n* The following are equivalent:\n * **A**: `1+2`\n * **B**: `add(1,2)`\n* **1** and **2** are arguments for both **A**, **B**\n* **+** is equivalent to **add()**\n* the return sum is **3**\n\nLet's define **add(...)** real quick\n```js\nfunction add(a,b) {\n    const sum = a + b;\n    return sum;\n}\n\n// remember to call add if you want\n// to __see__ it doing stuff\n\n// will this run?\nadd(1, 2);\n\n// how about this?\nconst sum = add(1, 2);\n\n// what do you expect to see?\nconsole.log(sum); \n\n```\n* Think about **add()** and **+** as similar operations\n* **+** is defined as a symbol by javascript\n* **add()** is a custom operation defined by the programmer (you)\n\n","idx":3},"functions":{"content":"# Functions\n---\n\n#### [Streaming Class Notes](http://samantha.fewd.us/#broadcast/mottaquikarim/NYCDA_JS_Day_3)\n\n<p></p>\n\n#### Declarations vs Expressions\n---\n\n#### [Declarations vs Expressions PSET](http://samantha.fewd.us/#fork/mottaquikarim/NYCDA_func_declarations_vs_expressions) | [LIVE](http://samantha.fewd.us/#broadcast/mottaquikarim/NYCDA_func_declarations_vs_expressions)\nSimple declaration vs expression practice problems.\n\nA **function declaration** is what we have learned functions to be.\n\nFor example:\n\n```js\nfunction foobar() { ... }\n```\n\n**^^^** this is a function declaration.\n\nHere are some variations of **function expressions**:\n```js\n// anonymous function expression\nconst foobar = function() { ... }\n\n// named function expression\nconst foobar = function foobar() { ... }\n```\n\n**Difference** between **declarations** and **expressions**:\n\n```js\nfoobar(); // this is OK\n          // function will run\n\n// function declaration\nfunction foobar() { ... }\n```\n\n**VS**\n\n```js\nfoobar(); // this will throw an error, why?\n\n// anonymous function expression\nconst foobar = function() { ... }\n```\n#### Scope\n---\n\n#### [Scopes PSET](http://samantha.fewd.us/#/fork/mottaquikarim/NYCDA_func_scope) | [LIVE](http://samantha.fewd.us/#/broadcast/mottaquikarim/NYCDA_func_scope)\nA list of scope scenarios to think through.\n\nScope refers to **availability**. Is the variable in question **available** to use during runtime?\n\nTake for instance, the following:\n\n```js\nfunction areaOfCircle(R) {\n    const pi = 3.14159;\n    const area = pi * r ** 2;\n    return area;\n}\n\nconst circArea = areaOfCircle(1);\n```\n\nIn the function above, **pi** and **area** are variables that are declared **inside** of function **areaOfCircle**. \n\nIn such scenarios, we say that **pi** and **area** are **local** to the scope of the **areaOfCircle** function. In otherwords, we get access to **pi** and **area** only when **areaOfCircle** begins to run and we lose access to **pi** and **area** when **areaOfCircle** completes running (ie: when it returns).\n\nPractically speaking, the following code will error:\n\n```js\nfunction areaOfCircle(R) {\n    const pi = 3.14159;\n    const area = pi * r ** 2;\n    return area;\n}\n\nconst circArea = areaOfCircle(1);\nconsole.log(pi); // WILL ERROR\n```\n\n**^^^** This is because **pi** is available **only** inside the **areaOfCircle** function invocation. \n\nNow, consider this:\n\n```js\nfunction areaOfCircle(R) {\n    const pi = 3.14159;\n    const area = pi * r ** 2;\n    return area;\n}\n\nconst pi = 90;\nconst circArea = areaOfCircle(1);\nconsole.log(pi); // 90\n```\n**^^^** In this case, we get **pi = 90**. **HOWEVER**, the **circArea** function will still return a correct answer (and **inside** the **areaOfCirlce** function, **pi = 3.14159**).\n\nThis has to do with the concept of the **scope chain**. Basically, if you explicitly declare a variable within a function, it will overwrite any references to the variable of the same name declared **outside** the function. \n\n\nSo for example:\n```js\n// we have set pi to 90 in the global \n// scope\nconst pi = 90;\n\nfunction areaOfCircle(R) {\n    // pi is set to 3.14...\n    // in this scope LOCAL to\n    // areaOfCircle\n    const pi = 3.14159;\n    const area = pi * r ** 2;\n    return area;\n}\n\n// outside of the areaOfCircle function\n// however, pi is 90\nconsole.log(pi); // 90\n\n// when areaOfCircle is called,\n// pi variable WITHIN areaOfCircle\n// is 3.14..., but this does NOT change\n// our GLOBAL pi reference\nconst circArea = areaOfCircle(1);\n\n// pi is still 90...\n\n```\n\n#### A Guide to Protecting the Lemmings\n---\n\nWe can exploit our knowledge of local scope to ensure that our variables are never in danger of being overwritten again.\n\n```js\n(function() { // protect the lemmings!\n\n})();\n```\n\n#### Default Parameters\n---\n\n#### [Default Params PSET](http://samantha.fewd.us/#fork/mottaquikarim/NYCDA_func_default_params) | [LIVE](http://samantha.fewd.us/#broadcast/mottaquikarim/NYCDA_func_default_params)\nA list of default params problems.\n\nDefault parameters are an **es6** feature which allows you to pass in default values for certain function parameters.\n\nThis is a **big** deal because traditionally, functions in javascript do not care about the **nature** of the params that are being passed in.\n\nSo for example, the following is permissible in javascript:\n\n```js\nfunction add(a,b) {\n    return a + b;\n}\n\nadd('hello', 'wrold'); // 'hellowrold'\n```\n\n**^^^** in the example above, one would assume that numbers are to be passed in  to the **add()** function, but instead, strings are passed in.\n\nAdditionally, the following is also permissible and troubling:\n\n```js\n\nfunction add(a,b) {\n    return a + b;\n}\n\nadd(); // NaN\n```\n\nOr even this:\n\n```js\nfunction add(a,b) {\n    return a + b;\n}\n\nadd(1); // NaN\n```\n\nTo prevent situations such as these, we have two solutions.\n\n**SOLUTION 1**: **default** params.\n\n```js\nfunction add(a, b = 0) {\n    return a + b;\n}\n\nadd(1); // 1\n```\n\n**^^^** Notice the `b = 0`. Now, if **add()** function does not have a second param passed in, it will automatically set **b** to **0**. This, at the very least, does not get us a **NaN**.\n\n**SOLUTION 2**: Conditional statements. (Next section).\n\n\n\n","idx":4},"conditionals":{"content":"# Conditionals\n---\n\n#### [Streaming Class Notes](http://samantha.fewd.us/#broadcast/mottaquikarim/NYCDA_JS_Day_3)\n<p></p>\n\n#### Exercises\n---\nThe following PSET contains 10 problems. \n#### [PSET - Functions](http://samantha.fewd.us/#fork/mottaquikarim/Functions_Practice) | [LIVE Instructor Notes](http://samantha.fewd.us/#broadcast/mottaquikarim/Functions_Practice)\nLatter problems are conditional based.\n\n#### [PSET - Conditionals](http://samantha.fewd.us/#fork/mottaquikarim/Conditionals) | [LIVE Instructor Notes](http://samantha.fewd.us/#broadcast/mottaquikarim/Conditionals)\nTry to solve all of these\n\n#### [Problem - Calculate Grade](http://samantha.fewd.us/#fork/mottaquikarim/Calculate_Grade) | [LIVE Instructor Notes](http://samantha.fewd.us/#broadcast/mottaquikarim/Calculate_Grade)\nThis one is more difficult, try it out though!\n\n\n#### JavaScript Logical Operators\n---\n<ul>\n    <li>`===`</li>\n    <li>`!==`</li>\n    <li>`>`</li>\n    <li>`<`</li>\n    <li>`>=`</li>\n    <li>`<=`</li>\n    <li>`&&`</li>\n    <li>`||`</li>\n    <li>`!`</li>\n</ul>\n```js\n// Comparison operators\n// you can evaluate a situation by comparing one value in the script\n// to what you expect it might be\n// the result will be a boolean: true or false\n\n/*\n *  the strict equality checking operator\n *  SYMBOL: ===\n */\nvar three = 3;\nvar equalityCheck = ( three === 3 );\nconsole.log( 'three === 3', equalityCheck );\n// note that equalityCheck, and ALL OTHER COMPARISON OPERATORS\n// evaluate to booleans\nconsole.log( 'typeof equalityCheck', typeof equalityCheck );\n\nvar equalityCheck2 = ( three === '3' ); // false because three is Number\n                                       // but '3' is a string\nconsole.log( \"( three === '3' )\", equalityCheck2 );\n// ALWAYS USE THE STRICT EQUALITY OPERATOR!!\n\n/*\n *  the strict NOT EQUAL checking operator\n *  SYMBOL: !==\n */\n\nvar notEqualityCheck = ( three !== 4 ); // should be true\nvar notEqualityCheck2 = ( three !== 3 ); // should be false;\n\nconsole.log( '( three !== 4 )', notEqualityCheck );\nconsole.log( '( three !== 3 )', notEqualityCheck2 );\n\n/*\n *  the greater than operator\n *  SYMBOL: >\n */\nvar greaterThan = ( three > 4 ); // returns false\nvar greaterThan2 = ( three > 2 ); // true\nconsole.log( '( three > 4 )', greaterThan );\nconsole.log( '( three > 2 )', greaterThan2 );\n\n/*\n *  the less than operator\n *  SYMBOL: <\n */\nvar lessThan = ( three < 2 ); // returns false\nvar lessThan2 = ( three < 5 ); // true\nconsole.log( '(three < 2)', lessThan );\nconsole.log( '(three < 5)', lessThan2 );\n \n/*\n *  the greater than or equal to operator\n *  SYMBOL: >=\n */ \nvar greaterThanOrEqualTo = ( three >= 4 ); // false\nvar greaterThanOrEqualTo2 = ( three >= 3 ); // true\nconsole.log( '( three >= 4 )', greaterThanOrEqualTo );\nconsole.log( '( three >= 3 )', greaterThanOrEqualTo2 );\n\n/*\n *  the less than or equal to operator\n *  SYMBOL: <=\n */ \nvar lessThanOrEqualTo = ( three <= 2 ); // false\nvar lessThanOrEqualTo2 = ( three <= 3 ); // true\nconsole.log( '( three <= 2 )', lessThanOrEqualTo );\nconsole.log( '( three <= 3 )', lessThanOrEqualTo2 );\n\n/*\n *  LOGICAL OPERATORS\n *  logical operators allow you to compare the results of more than one\n *  comparison operator\n *  TYPES: '&&', '||'\n */ \n\n/*\n *  the AND operator\n *  SYMBOL: &&\n *  returns true only when both expressions evaluate to true\n */ \nvar andOp = ((2 < 5) && (3 >=2)); // is 2 less than five AND\n                                  // is 3 greater than or equal to 2\nconsole.log( '((2 < 5) && (3 >=2))', andOp );\nconsole.log( 'typeof andOp', andOp );\n// NOTE, we can string together as many ANDs as we need...\n\n/*\n *  the OR operator\n *  SYMBOL: ||\n *  returns true when ONE of the expressions are true\n */ \nvar orOp = ((2 < 5) || (2 < 1)); // if EITHER one of these exprs are true\n                                 // then will evaluate to true\nconsole.log( '((2 < 5) || (2 < 1))', orOp );\n// NOTE, we can string together as many ORs as we need...\n\n/*\n *  the NOT operator\n *  SYMBOL: !\n *  returns opposite of evaluated expression\n */ \nvar notOp = !(2 < 1);\nconsole.log( '!(2 < 1)', notOp );\n\n// Complete example\n\nfunction checkNumber () {\n    \n    var n = prompt(\"Enter a number\", \"5\")\n        , entered = \"You entered a number between\"; \n\n    if (n >= 1 && n < 10) {\n        alert(entered + \" 0 and 10\");\n    }\n    else if (n >= 10 && n < 20) {\n        alert(entered + \" 9 and 20\");\n    }\n    else if (n >= 20 && n < 30) { \n        alert(entered + \" 19 and 30\");\n    }\n    else if (n >= 30 && n < 40) {\n        alert(entered + \" 29 and 40\");\n    }\n    else if (n >= 40 && n <= 100) {\n        alert(entered + \" 39 and 100\");\n    }\n    else if (n < 1 || n > 100) {\n        alert(\"You entered a number less than 1 or greater than 100\");\n    }\n    else {\n        alert(\"You did not enter a number!\");\n      }\n}\n\n\n```\n#### The conditional block\n---\n\n<ul>\n    <li>the `if` statement</li>\n    <li>the `if/else` statement</li>\n    <li>the `if/else if/else` statement</li>\n</ul>\n```js\n// the if..else statement check a condition\n// if it resolves to true the first code block is run\n// if the condition resolved to false the second code block is run instead\n\nvar pass = 50    // pass mark\n    , score = 75   // current score\n    , msg;   // message\n    \n// select message to write based on score    \nif ( score >= pass ) {     \n    // conditional statement\n    // if code block\n    // anything in here will be run if\n    // the stuff in the (...) evaluates to true\n    msg = \"Congratulations you passed!\";  \n}    \nelse {  // else code block; if the obove is NOT true then...\n    msg = \" Try again :( \";  \n}\n// note this example of how we can use the if/else\n// to set the value of a variable\nconsole.log( msg ); \n\n/*\n *  the if/else if/else block\n */\n\nvar passingGrade;\nif ( score < 50 ) {\n    passingGrade = \"F\";\n}\nelse if ( score < 60 ) {\n    passingGrade = \"D\";\n}\nelse if ( score < 70 ) {\n    passingGrade = \"C\";\n}\nelse if ( score < 80 ) {\n    passingGrade = \"B\";\n}\nelse if ( score < 90 ) {\n    passingGrade = \"A\"\n}\nelse {\n    passingGrade = \"A+\";\n}\n\nconsole.log( \"Your grade is: \", passingGrade );\n\n\n```\n\n\n\n    \n    \n    \n","idx":5},"objects":{"content":"# Objects\n---\n\n#### [Streaming Class Notes](http://samantha.fewd.us/#broadcast/mottaquikarim/NYCDA_JS_Day_3)\n<p></p>\n\n#### Exercises\n---\n\n#### [Problems 47-50: Objects](http://samantha.fewd.us/#fork/mottaquikarim/FEWD_629_functions_pset_9) | [LIVE class notes](http://samantha.fewd.us/#broadcast/mottaquikarim/FEWD_629_functions_pset_9)\n<p></o>\n\nObjects in javascript are a way to group variables that are similar to each other thematically.\n\n#### Example\n\nDescribe a `cat` with javascript.\n\nBased on what we know thus far, we can do the following:\n\n```js\nconst catName = 'Annabelle Lee';\nconst catType = 'tabby';\nconst catLimbs = 4;\nconst catAge = 10;\nconst catIsCute = true;\n```\n\nUsing those stored variables, we can reasonably formulate a portrait of a paricular cat.\n\nHowever, what if we needed to describe **two** cats in javascript? What now?\n\nAgain, based on what we know so far, we would be force to do the following:\n\n```js\nconst catName2 = 'Annabelle Lee';\nconst catType2 = 'tabby';\nconst catLimbs2 = 4;\nconst catAge2 = 10;\nconst catIsCute2 = true;\n```\n\n**OR**, we'd have to do the following:\n\n```js\nconst belleFullName = 'Annabelle Lee';\nconst belleType = 'tabby';\nconst belleLimbs = 4;\nconst belleAge = 10;\nconst belleIsCute = true;\n```\n\n**^^^** with both of those strategies, we **could** solve our problem of having described two cats...but the issue still persists - what if we needed 10 cats? What if we had **two cats with the same name**? What if we generically wanted to define a cat through a function?\n\nIn order to solve all of the above usecases, we must now consider a new type of javascript variable, the **object**.\n\nObjects are **everywhere** in javascript **and** have much deeper usecases beyond what was outlined above. In fact, all of javascript itself is **built** on objects.\n\nBefore going further, let us look at how to store objects and manipulate them.\n\n#### Example\nOur previous cat, now as an object:\n\n```js\nconst belle = {\n    type: 'tabby',\n    age: 10,\n    limbs: 4,\n    isCute: true\n};\n```","idx":6},"__list__":["home","title","desc","warmup","functions","conditionals","objects"]}