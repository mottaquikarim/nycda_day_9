{"home":{"content":"# Functions, Conditionals, Objects\n---\n\nWelcome to lecture 9! Here's a brief class breakdown.\n\n#### [Streaming Class Notes](http://samantha.fewd.us/#broadcast/mottaquikarim/NYCDA_JS_Day_3)\nYour class notes for the day.\n\n\n#### Learning Objectives\n---\n\n1. Understand how conditionals and booleans can be used for programmatic decision making\n2. Understand how functions can be used to run similar tasks repeatedly.\n3. What are objects? How are they useful in programming?\n\n#### To Do Today\n---\n\n#### [Warmup](#warmup)\n#### [Functions](#functions)\n#### [Conditionals](#conditionals)\n#### [Objects](#objects)\n\n","idx":0},"title":{"content":"Functions, Conditionals, Objects","idx":1},"desc":{"content":"Introduction to JavaScript","idx":2},"warmup":{"content":"# Warmup\n---\n\n#### [Streaming Class Notes](http://samantha.fewd.us/#broadcast/mottaquikarim/NYCDA_JS_Day_3)\n\n<p></p>\n\nLet's begin with a few warmup exercises.\n\n#### Exercise 1\n---\n\n**ALL IN TERMINAL**:\n\n1. **Create** a new folder in your desktop.\n2. **Create** an index.html file with some text\n3. **Create** a styles folder\n4. **Add** empty main.css\n5. **Initialize** git in this directory\n6. **Create repo** in GitHub\n7. **Push** repo to Github\n\n#### Exercise 2\n---\n\n#### [Javascript Functions Practice 2](http://samantha.fewd.us/#fork/mottaquikarim/FEWD629_JavaScript_Basics_PSET) | [LIVE](http://samantha.fewd.us/#broadcast/mottaquikarim/FEWD629_JavaScript_Basics_PSET)\n**PURPOSE**: Review basic function operations\n\n#### Review\n---\n#### [LAST Class Notes](http://samantha.fewd.us/#broadcast/mottaquikarim/NYCDA_JS_Day_2)\n<p></p>\n\nTo help jog your memory, here's a quick review of some of the javascript we covered last class:\n\n#### Functions Review\n\n* The following are equivalent:\n * **A**: `1+2`\n * **B**: `add(1,2)`\n* **1** and **2** are arguments for both **A**, **B**\n* **+** is equivalent to **add()**\n* the return sum is **3**\n\nLet's define **add(...)** real quick\n```js\nfunction add(a,b) {\n    const sum = a + b;\n    return sum;\n}\n\n// remember to call add if you want\n// to __see__ it doing stuff\n\n// will this run?\nadd(1, 2);\n\n// how about this?\nconst sum = add(1, 2);\n\n// what do you expect to see?\nconsole.log(sum); \n\n```\n* Think about **add()** and **+** as similar operations\n* **+** is defined as a symbol by javascript\n* **add()** is a custom operation defined by the programmer (you)\n\n","idx":3},"functions":{"content":"# Functions\n---\n\n#### [Streaming Class Notes](http://samantha.fewd.us/#broadcast/mottaquikarim/NYCDA_JS_Day_3)\n\n<p></p>\n\n#### Declarations vs Expressions\n---\n\n#### [Declarations vs Expressions PSET](http://samantha.fewd.us/#fork/mottaquikarim/NYCDA_func_declarations_vs_expressions) | [LIVE](http://samantha.fewd.us/#broadcast/mottaquikarim/NYCDA_func_declarations_vs_expressions)\nSimple declaration vs expression practice problems.\n\nA **function declaration** is what we have learned functions to be.\n\nFor example:\n\n```js\nfunction foobar() { ... }\n```\n\n**^^^** this is a function declaration.\n\nHere are some variations of **function expressions**:\n```js\n// anonymous function expression\nconst foobar = function() { ... }\n\n// named function expression\nconst foobar = function foobar() { ... }\n```\n\n**Difference** between **declarations** and **expressions**:\n\n```js\nfoobar(); // this is OK\n          // function will run\n\n// function declaration\nfunction foobar() { ... }\n```\n\n**VS**\n\n```js\nfoobar(); // this will throw an error, why?\n\n// anonymous function expression\nconst foobar = function() { ... }\n```\n#### Scope\n---\n\n#### [Scopes PSET](http://samantha.fewd.us/#/fork/mottaquikarim/NYCDA_func_scope) | [LIVE](http://samantha.fewd.us/#/broadcast/mottaquikarim/NYCDA_func_scope)\nA list of scope scenarios to think through.\n\nScope refers to **availability**. Is the variable in question **available** to use during runtime?\n\nTake for instance, the following:\n\n```js\nfunction areaOfCircle(R) {\n    const pi = 3.14159;\n    const area = pi * r ** 2;\n    return area;\n}\n\nconst circArea = areaOfCircle(1);\n```\n\nIn the function above, **pi** and **area** are variables that are declared **inside** of function **areaOfCircle**. \n\nIn such scenarios, we say that **pi** and **area** are **local** to the scope of the **areaOfCircle** function. In otherwords, we get access to **pi** and **area** only when **areaOfCircle** begins to run and we lose access to **pi** and **area** when **areaOfCircle** completes running (ie: when it returns).\n\nPractically speaking, the following code will error:\n\n```js\nfunction areaOfCircle(R) {\n    const pi = 3.14159;\n    const area = pi * r ** 2;\n    return area;\n}\n\nconst circArea = areaOfCircle(1);\nconsole.log(pi); // WILL ERROR\n```\n\n**^^^** This is because **pi** is available **only** inside the **areaOfCircle** function invocation. \n\nNow, consider this:\n\n```js\nfunction areaOfCircle(R) {\n    const pi = 3.14159;\n    const area = pi * r ** 2;\n    return area;\n}\n\nconst pi = 90;\nconst circArea = areaOfCircle(1);\nconsole.log(pi); // 90\n```\n**^^^** In this case, we get **pi = 90**. **HOWEVER**, the **circArea** function will still return a correct answer (and **inside** the **areaOfCirlce** function, **pi = 3.14159**).\n\nThis has to do with the concept of the **scope chain**. Basically, if you explicitly declare a variable within a function, it will overwrite any references to the variable of the same name declared **outside** the function. \n\n\nSo for example:\n```js\n// we have set pi to 90 in the global \n// scope\nconst pi = 90;\n\nfunction areaOfCircle(R) {\n    // pi is set to 3.14...\n    // in this scope LOCAL to\n    // areaOfCircle\n    const pi = 3.14159;\n    const area = pi * r ** 2;\n    return area;\n}\n\n// outside of the areaOfCircle function\n// however, pi is 90\nconsole.log(pi); // 90\n\n// when areaOfCircle is called,\n// pi variable WITHIN areaOfCircle\n// is 3.14..., but this does NOT change\n// our GLOBAL pi reference\nconst circArea = areaOfCircle(1);\n\n// pi is still 90...\n\n```\n\n#### A Guide to Protecting the Lemmings\n---\n\nWe can exploit our knowledge of local scope to ensure that our variables are never in danger of being overwritten again.\n\n```js\n(function() { // protect the lemmings!\n\n})();\n```\n\n#### Default Parameters\n---\n\n#### [Default Params PSET](http://samantha.fewd.us/#fork/mottaquikarim/NYCDA_func_default_params) | [LIVE](http://samantha.fewd.us/#broadcast/mottaquikarim/NYCDA_func_default_params)\nA list of default params problems.\n\nDefault parameters are an **es6** feature which allows you to pass in default values for certain function parameters.\n\nThis is a **big** deal because traditionally, functions in javascript do not care about the **nature** of the params that are being passed in.\n\nSo for example, the following is permissible in javascript:\n\n```js\nfunction add(a,b) {\n    return a + b;\n}\n\nadd('hello', 'wrold'); // 'hellowrold'\n```\n\n**^^^** in the example above, one would assume that numbers are to be passed in  to the **add()** function, but instead, strings are passed in.\n\nAdditionally, the following is also permissible and troubling:\n\n```js\n\nfunction add(a,b) {\n    return a + b;\n}\n\nadd(); // NaN\n```\n\nOr even this:\n\n```js\nfunction add(a,b) {\n    return a + b;\n}\n\nadd(1); // NaN\n```\n\nTo prevent situations such as these, we have two solutions.\n\n**SOLUTION 1**: **default** params.\n\n```js\nfunction add(a, b = 0) {\n    return a + b;\n}\n\nadd(1); // 1\n```\n\n**^^^** Notice the `b = 0`. Now, if **add()** function does not have a second param passed in, it will automatically set **b** to **0**. This, at the very least, does not get us a **NaN**.\n\n**SOLUTION 2**: Conditional statements. (Next section).\n\n\n\n","idx":4},"conditionals":{"content":"# Conditionals\n---\n\n#### [Streaming Class Notes](http://samantha.fewd.us/#broadcast/mottaquikarim/NYCDA_JS_Day_3)","idx":5},"objects":{"content":"# Objects\n---\n\n#### [Streaming Class Notes](http://samantha.fewd.us/#broadcast/mottaquikarim/NYCDA_JS_Day_3)\n","idx":6},"__list__":["home","title","desc","warmup","functions","conditionals","objects"]}